
attiny412-simple-wall-led-source.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00803f00  00000218  000002ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000218  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00803f08  00803f08  000002b4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ba2  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000154a  00000000  00000000  00001f3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004c0  00000000  00000000  00003484  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  00003944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ea6  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017f  00000000  00000000  000048e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00004a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1f e3       	ldi	r17, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	e8 e1       	ldi	r30, 0x18	; 24
  48:	f2 e0       	ldi	r31, 0x02	; 2
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a8 30       	cpi	r26, 0x08	; 8
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a8 e0       	ldi	r26, 0x08	; 8
  5a:	bf e3       	ldi	r27, 0x3F	; 63
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a9 30       	cpi	r26, 0x09	; 9
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	b1 d0       	rcall	.+354    	; 0x1ca <main>
  68:	d5 c0       	rjmp	.+426    	; 0x214 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <clk_init>:

volatile uint8_t test_mode = 0;

void clk_init()
{
	CCP = CCP_IOREG_gc;
  6c:	88 ed       	ldi	r24, 0xD8	; 216
  6e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_OSC20M_gc;
  70:	e0 e6       	ldi	r30, 0x60	; 96
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	10 82       	st	Z, r1
	CCP = CCP_IOREG_gc;
  76:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLB = 0;
  78:	11 82       	std	Z+1, r1	; 0x01
  7a:	08 95       	ret

0000007c <usart_init>:
}

void usart_init()
{
	PORTA.DIRSET = PIN6_bm;
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
	USART0_CTRLA = 0;
  82:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <__RODATA_PM_OFFSET__+0x7f8805>
	USART0_CTRLB = USART_TXEN_bm;
  86:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
	USART0_CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_SBMODE_1BIT_gc | USART_CHSIZE_8BIT_gc;
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__RODATA_PM_OFFSET__+0x7f8807>
	USART0_BAUD = USART0_BAUD_RATE(115200);
  90:	86 eb       	ldi	r24, 0xB6	; 182
  92:	92 e0       	ldi	r25, 0x02	; 2
  94:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
  98:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
  9c:	08 95       	ret

0000009e <transmit_single_led>:
}

void transmit_single_led(uint8_t r, uint8_t g, uint8_t b)
{
	while (!(USART0_STATUS & USART_DREIF_bm)){};
  9e:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  a2:	95 ff       	sbrs	r25, 5
  a4:	fc cf       	rjmp	.-8      	; 0x9e <transmit_single_led>
	USART0_TXDATAL = r;
  a6:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
	while (!(USART0_STATUS & USART_DREIF_bm)){};
  aa:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  ae:	85 ff       	sbrs	r24, 5
  b0:	fc cf       	rjmp	.-8      	; 0xaa <transmit_single_led+0xc>
	USART0_TXDATAL = g;
  b2:	60 93 02 08 	sts	0x0802, r22	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
	while (!(USART0_STATUS & USART_DREIF_bm)){};
  b6:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  ba:	85 ff       	sbrs	r24, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <transmit_single_led+0x18>
	USART0_TXDATAL = b;
  be:	40 93 02 08 	sts	0x0802, r20	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
  c2:	08 95       	ret

000000c4 <transmit_led_count>:
}

void transmit_led_count()
{
	//high byte first
	while (!(USART0_STATUS & USART_DREIF_bm)){};
  c4:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  c8:	85 ff       	sbrs	r24, 5
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <transmit_led_count>
	USART0_TXDATAL = LEDS >> 8;
  cc:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
	
	//then low byte
	while (!(USART0_STATUS & USART_DREIF_bm)){};
  d0:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  d4:	85 ff       	sbrs	r24, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <transmit_led_count+0xc>
	USART0_TXDATAL = LEDS;		
  d8:	84 e6       	ldi	r24, 0x64	; 100
  da:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
  de:	08 95       	ret

000000e0 <transmit_test_4>:
	transmit_single_color(0, 0, 255);
}

//transmit repeating red, green, blue 
void transmit_test_4()
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
	
	transmit_led_count();
  e4:	ef df       	rcall	.-34     	; 0xc4 <transmit_led_count>
	
	for (uint16_t led_index = 0; led_index < LEDS; led_index++)
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	23 c0       	rjmp	.+70     	; 0x132 <__DATA_REGION_LENGTH__+0x32>
	{
		if (led_index % 3 == 0)
  ec:	9e 01       	movw	r18, r28
  ee:	ab ea       	ldi	r26, 0xAB	; 171
  f0:	ba ea       	ldi	r27, 0xAA	; 170
  f2:	84 d0       	rcall	.+264    	; 0x1fc <__umulhisi3>
  f4:	96 95       	lsr	r25
  f6:	87 95       	ror	r24
  f8:	9c 01       	movw	r18, r24
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	82 0f       	add	r24, r18
 100:	93 1f       	adc	r25, r19
 102:	9e 01       	movw	r18, r28
 104:	28 1b       	sub	r18, r24
 106:	39 0b       	sbc	r19, r25
 108:	c9 01       	movw	r24, r18
 10a:	89 2b       	or	r24, r25
 10c:	29 f4       	brne	.+10     	; 0x118 <__DATA_REGION_LENGTH__+0x18>
		{
			transmit_single_led(255, 0, 0);
 10e:	40 e0       	ldi	r20, 0x00	; 0
 110:	60 e0       	ldi	r22, 0x00	; 0
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	c4 df       	rcall	.-120    	; 0x9e <transmit_single_led>
 116:	0c c0       	rjmp	.+24     	; 0x130 <__DATA_REGION_LENGTH__+0x30>
		}
		else if (led_index % 3 == 1)
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	31 05       	cpc	r19, r1
 11c:	29 f4       	brne	.+10     	; 0x128 <__DATA_REGION_LENGTH__+0x28>
		{
			transmit_single_led(0, 255, 0);
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	6f ef       	ldi	r22, 0xFF	; 255
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	bc df       	rcall	.-136    	; 0x9e <transmit_single_led>
 126:	04 c0       	rjmp	.+8      	; 0x130 <__DATA_REGION_LENGTH__+0x30>
		}
		else
		{
			transmit_single_led(0, 0, 255);
 128:	4f ef       	ldi	r20, 0xFF	; 255
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	b7 df       	rcall	.-146    	; 0x9e <transmit_single_led>
void transmit_test_4()
{
	
	transmit_led_count();
	
	for (uint16_t led_index = 0; led_index < LEDS; led_index++)
 130:	21 96       	adiw	r28, 0x01	; 1
 132:	c4 36       	cpi	r28, 0x64	; 100
 134:	d1 05       	cpc	r29, r1
 136:	d0 f2       	brcs	.-76     	; 0xec <transmit_test_4+0xc>
		{
			transmit_single_led(0, 0, 255);
		}
	}	
	
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <transmit_single_color>:
	while (!(USART0_STATUS & USART_DREIF_bm)){};
	USART0_TXDATAL = LEDS;		
}

void transmit_single_color(uint8_t r, uint8_t g, uint8_t b)
{
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	f8 2e       	mov	r15, r24
 14a:	06 2f       	mov	r16, r22
 14c:	14 2f       	mov	r17, r20
	transmit_led_count();
 14e:	ba df       	rcall	.-140    	; 0xc4 <transmit_led_count>
	for (uint16_t led_index = 0; led_index < LEDS; led_index++)
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	d0 e0       	ldi	r29, 0x00	; 0
 154:	05 c0       	rjmp	.+10     	; 0x160 <transmit_single_color+0x22>
	{
		transmit_single_led(r, g, b);
 156:	41 2f       	mov	r20, r17
 158:	60 2f       	mov	r22, r16
 15a:	8f 2d       	mov	r24, r15
 15c:	a0 df       	rcall	.-192    	; 0x9e <transmit_single_led>
}

void transmit_single_color(uint8_t r, uint8_t g, uint8_t b)
{
	transmit_led_count();
	for (uint16_t led_index = 0; led_index < LEDS; led_index++)
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	c4 36       	cpi	r28, 0x64	; 100
 162:	d1 05       	cpc	r29, r1
 164:	c0 f3       	brcs	.-16     	; 0x156 <transmit_single_color+0x18>
	{
		transmit_single_led(r, g, b);
	}	
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	08 95       	ret

00000172 <transmit_test_1>:

//transmit all red
void transmit_test_1()
{
	transmit_single_color(255, 0, 0);	
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	e2 df       	rcall	.-60     	; 0x13e <transmit_single_color>
 17a:	08 95       	ret

0000017c <transmit_test_2>:
}

//transmit all green
void transmit_test_2()
{
	transmit_single_color(0, 255, 0);
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	6f ef       	ldi	r22, 0xFF	; 255
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	dd df       	rcall	.-70     	; 0x13e <transmit_single_color>
 184:	08 95       	ret

00000186 <transmit_test_3>:
}

//transmit all blue
void transmit_test_3()
{
	transmit_single_color(0, 0, 255);
 186:	4f ef       	ldi	r20, 0xFF	; 255
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	d8 df       	rcall	.-80     	; 0x13e <transmit_single_color>
 18e:	08 95       	ret

00000190 <transmit_normal_color>:
	
}

void transmit_normal_color()
{
	transmit_single_color(255, 142, 33);
 190:	41 e2       	ldi	r20, 0x21	; 33
 192:	6e e8       	ldi	r22, 0x8E	; 142
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	d3 df       	rcall	.-90     	; 0x13e <transmit_single_color>
 198:	08 95       	ret

0000019a <generate_test_data>:

void (*test_table[4])(void) = { transmit_test_1, transmit_test_2, transmit_test_3, transmit_test_4};

void generate_test_data()
{
	if (PORTA.IN & PIN1_bm)
 19a:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 19e:	81 ff       	sbrs	r24, 1
 1a0:	12 c0       	rjmp	.+36     	; 0x1c6 <generate_test_data+0x2c>
	{		
		(*test_table[test_mode & 0x03])();
 1a2:	e0 91 08 3f 	lds	r30, 0x3F08	; 0x803f08 <__data_end>
 1a6:	e3 70       	andi	r30, 0x03	; 3
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	ee 0f       	add	r30, r30
 1ac:	ff 1f       	adc	r31, r31
 1ae:	e0 50       	subi	r30, 0x00	; 0
 1b0:	f1 4c       	sbci	r31, 0xC1	; 193
 1b2:	01 90       	ld	r0, Z+
 1b4:	f0 81       	ld	r31, Z
 1b6:	e0 2d       	mov	r30, r0
 1b8:	09 95       	icall
		test_mode++;
 1ba:	80 91 08 3f 	lds	r24, 0x3F08	; 0x803f08 <__data_end>
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 08 3f 	sts	0x3F08, r24	; 0x803f08 <__data_end>
 1c4:	08 95       	ret
	}
	else 
	{
		transmit_normal_color();
 1c6:	e4 df       	rcall	.-56     	; 0x190 <transmit_normal_color>
 1c8:	08 95       	ret

000001ca <main>:
	}
}

int main(void)
{
	PORTA.DIRSET = PIN7_bm;
 1ca:	e0 e0       	ldi	r30, 0x00	; 0
 1cc:	f4 e0       	ldi	r31, 0x04	; 4
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTCLR = PIN7_bm;
 1d2:	86 83       	std	Z+6, r24	; 0x06
	PORTA.DIRCLR = PIN1_bm;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN1CTRL = PORT_PULLUPEN_bm;
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	81 8b       	std	Z+17, r24	; 0x11
	clk_init();
 1dc:	47 df       	rcall	.-370    	; 0x6c <clk_init>
	usart_init();
 1de:	4e df       	rcall	.-356    	; 0x7c <usart_init>
	
	
    /* Replace with your application code */
    while (1) 
    {
		PORTA.OUTTGL = PIN7_bm;
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <__RODATA_PM_OFFSET__+0x7f8407>
		generate_test_data();
 1e6:	d9 df       	rcall	.-78     	; 0x19a <generate_test_data>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	8a e1       	ldi	r24, 0x1A	; 26
 1ec:	97 eb       	ldi	r25, 0xB7	; 183
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x24>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x2e>
 1f8:	00 00       	nop
 1fa:	f2 cf       	rjmp	.-28     	; 0x1e0 <main+0x16>

000001fc <__umulhisi3>:
 1fc:	a2 9f       	mul	r26, r18
 1fe:	b0 01       	movw	r22, r0
 200:	b3 9f       	mul	r27, r19
 202:	c0 01       	movw	r24, r0
 204:	a3 9f       	mul	r26, r19
 206:	01 d0       	rcall	.+2      	; 0x20a <__umulhisi3+0xe>
 208:	b2 9f       	mul	r27, r18
 20a:	70 0d       	add	r23, r0
 20c:	81 1d       	adc	r24, r1
 20e:	11 24       	eor	r1, r1
 210:	91 1d       	adc	r25, r1
 212:	08 95       	ret

00000214 <_exit>:
 214:	f8 94       	cli

00000216 <__stop_program>:
 216:	ff cf       	rjmp	.-2      	; 0x216 <__stop_program>

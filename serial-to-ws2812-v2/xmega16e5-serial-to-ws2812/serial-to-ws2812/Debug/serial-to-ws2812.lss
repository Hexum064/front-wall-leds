
serial-to-ws2812.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00802000  000004a4  00000538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005e6  00802020  00802020  00000558  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000588  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003303  00000000  00000000  00000648  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c4c  00000000  00000000  0000394b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ae  00000000  00000000  00005597  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  00005c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000030a5  00000000  00000000  00005d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000130  00000000  00000000  00008e09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00008f39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 2f 02 	jmp	0x45e	; 0x45e <__vector_12>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_40>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	d7 e2       	ldi	r29, 0x27	; 39
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_copy_data>:
  b8:	10 e2       	ldi	r17, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	e4 ea       	ldi	r30, 0xA4	; 164
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a0 32       	cpi	r26, 0x20	; 32
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	26 e2       	ldi	r18, 0x26	; 38
  d0:	a0 e2       	ldi	r26, 0x20	; 32
  d2:	b0 e2       	ldi	r27, 0x20	; 32
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a6 30       	cpi	r26, 0x06	; 6
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
  e2:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <read_baud_switches>:

void read_baud_switches()
{

	
	uint8_t pIn = PORTA.IN;
  ea:	80 91 08 06 	lds	r24, 0x0608	; 0x800608 <__TEXT_REGION_LENGTH__+0x7fb608>
	setting = (pIn & 0x1F) >> 1;
  ee:	8f 71       	andi	r24, 0x1F	; 31
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	80 93 21 20 	sts	0x2021, r24	; 0x802021 <setting>
	selected_baudctrla = baudctrla[setting];
  fa:	e0 91 21 20 	lds	r30, 0x2021	; 0x802021 <setting>
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	e0 5f       	subi	r30, 0xF0	; 240
 102:	ff 4d       	sbci	r31, 0xDF	; 223
 104:	80 81       	ld	r24, Z
 106:	80 93 28 20 	sts	0x2028, r24	; 0x802028 <selected_baudctrla>
	selected_baudctrlb = baudctrlb[setting];
 10a:	e0 91 21 20 	lds	r30, 0x2021	; 0x802021 <setting>
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	e0 50       	subi	r30, 0x00	; 0
 112:	f0 4e       	sbci	r31, 0xE0	; 224
 114:	80 81       	ld	r24, Z
 116:	80 93 05 26 	sts	0x2605, r24	; 0x802605 <selected_baudctrlb>
 11a:	08 95       	ret

0000011c <init_clk>:
}

void init_clk()
{
	CCP = CCP_IOREG_gc;
 11c:	88 ed       	ldi	r24, 0xD8	; 216
 11e:	84 bf       	out	0x34, r24	; 52
	OSC_CTRL = OSC_RC32MEN_bm;
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x7fb050>
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm)){};
 126:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fb051>
 12a:	81 ff       	sbrs	r24, 1
 12c:	fc cf       	rjmp	.-8      	; 0x126 <init_clk+0xa>
		
	CCP = CCP_IOREG_gc;
 12e:	88 ed       	ldi	r24, 0xD8	; 216
 130:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7fb040>
 138:	08 95       	ret

0000013a <init_interrupts>:
	
}

void init_interrupts()
{
	PMIC_CTRL = PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm;
 13a:	87 e0       	ldi	r24, 0x07	; 7
 13c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7fb0a2>
 140:	08 95       	ret

00000142 <init_usart>:
}

void init_usart()
{
	
	PORTD.DIRCLR = PIN2_bm;
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x7fb662>
	USARTD0_CTRLA = USART_DREIF_bm | USART_RXCINTLVL0_bm;
 148:	80 e3       	ldi	r24, 0x30	; 48
 14a:	80 93 c2 09 	sts	0x09C2, r24	; 0x8009c2 <__TEXT_REGION_LENGTH__+0x7fb9c2>
	USARTD0_CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 14e:	88 e1       	ldi	r24, 0x18	; 24
 150:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7fb9c3>
	USARTD0_CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	80 93 c4 09 	sts	0x09C4, r24	; 0x8009c4 <__TEXT_REGION_LENGTH__+0x7fb9c4>

	//115.2 BAUD BSEL = 131, BSCALE = -3
//	USARTD0_BAUDCTRLA = 131;
//	USARTD0_BAUDCTRLB = -3 << 4;
	
	USARTD0_BAUDCTRLA = selected_baudctrla;// 131;
 15a:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <selected_baudctrla>
 15e:	80 93 c6 09 	sts	0x09C6, r24	; 0x8009c6 <__TEXT_REGION_LENGTH__+0x7fb9c6>
	USARTD0_BAUDCTRLB = selected_baudctrlb << 4; // -3 << 4;	
 162:	80 91 05 26 	lds	r24, 0x2605	; 0x802605 <selected_baudctrlb>
 166:	82 95       	swap	r24
 168:	80 7f       	andi	r24, 0xF0	; 240
 16a:	80 93 c7 09 	sts	0x09C7, r24	; 0x8009c7 <__TEXT_REGION_LENGTH__+0x7fb9c7>
 16e:	08 95       	ret

00000170 <set_baud>:
	
}

void set_baud()
{
	read_baud_switches();
 170:	0e 94 75 00 	call	0xea	; 0xea <read_baud_switches>
	USARTD0_BAUDCTRLA = selected_baudctrla;// 131;
 174:	80 91 28 20 	lds	r24, 0x2028	; 0x802028 <selected_baudctrla>
 178:	80 93 c6 09 	sts	0x09C6, r24	; 0x8009c6 <__TEXT_REGION_LENGTH__+0x7fb9c6>
	USARTD0_BAUDCTRLB = selected_baudctrlb << 4; // -3 << 4;	
 17c:	80 91 05 26 	lds	r24, 0x2605	; 0x802605 <selected_baudctrlb>
 180:	82 95       	swap	r24
 182:	80 7f       	andi	r24, 0xF0	; 240
 184:	80 93 c7 09 	sts	0x09C7, r24	; 0x8009c7 <__TEXT_REGION_LENGTH__+0x7fb9c7>
 188:	08 95       	ret

0000018a <init_timer>:

//"Timeout" timer
void init_timer()
{
	
	TCC4.CTRLB = 0; //Normal mode, disable circ buffer, WFG: normal PER
 18a:	e0 e0       	ldi	r30, 0x00	; 0
 18c:	f8 e0       	ldi	r31, 0x08	; 8
 18e:	11 82       	std	Z+1, r1	; 0x01
	TCC4.CTRLC = 0; //no polarity change or comp output val
 190:	12 82       	std	Z+2, r1	; 0x02
	TCC4.CTRLD = 0; //no event action
 192:	13 82       	std	Z+3, r1	; 0x03
	TCC4.CTRLE = 0; //doesn't matter
 194:	14 82       	std	Z+4, r1	; 0x04
	TCC4.CTRLF = 0; //doesn't matter
 196:	15 82       	std	Z+5, r1	; 0x05
	TCC4.INTCTRLA = TC4_OVFINTLVL_gm;
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	86 83       	std	Z+6, r24	; 0x06
	TCC4.CTRLA = TC4_CLKSEL0_bm; //Prescaler: Clk, start the timer
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 83       	st	Z, r24
	//Stop the "timeout" timer until we start receiving
	TCC4.CTRLGSET = TC4_STOP_bm;
 1a0:	80 e2       	ldi	r24, 0x20	; 32
 1a2:	81 87       	std	Z+9, r24	; 0x09
 1a4:	08 95       	ret

000001a6 <ws2812drv_init>:


void ws2812drv_init(void)
{
	// Setup EDMA channel 0(+1)
	EDMA.CTRL = EDMA_ENABLE_bm | EDMA_CHMODE_STD02_gc | EDMA_DBUFMODE_DISABLE_gc | EDMA_PRIMODE_CH0123_gc;
 1a6:	a0 e0       	ldi	r26, 0x00	; 0
 1a8:	b1 e0       	ldi	r27, 0x01	; 1
 1aa:	83 eb       	ldi	r24, 0xB3	; 179
 1ac:	8c 93       	st	X, r24
	EDMA.CH0.CTRLB = EDMA_CH_TRNINTLVL_OFF_gc;
 1ae:	51 96       	adiw	r26, 0x11	; 17
 1b0:	1c 92       	st	X, r1
 1b2:	51 97       	sbiw	r26, 0x11	; 17
	EDMA.CH0.ADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DIR_INC_gc;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	52 96       	adiw	r26, 0x12	; 18
 1b8:	8c 93       	st	X, r24
 1ba:	52 97       	sbiw	r26, 0x12	; 18
	EDMA.CH0.DESTADDRCTRL = EDMA_CH_RELOAD_NONE_gc | EDMA_CH_DESTDIR_FIXED_gc;
 1bc:	53 96       	adiw	r26, 0x13	; 19
 1be:	1c 92       	st	X, r1
 1c0:	53 97       	sbiw	r26, 0x13	; 19
	EDMA.CH0.DESTADDR = (uint16_t)&USARTC0.DATA;
 1c2:	e0 ec       	ldi	r30, 0xC0	; 192
 1c4:	f8 e0       	ldi	r31, 0x08	; 8
 1c6:	5c 96       	adiw	r26, 0x1c	; 28
 1c8:	ed 93       	st	X+, r30
 1ca:	fc 93       	st	X, r31
 1cc:	5d 97       	sbiw	r26, 0x1d	; 29
	EDMA.CH0.TRIGSRC = EDMA_CH_TRIGSRC_USARTC0_DRE_gc;
 1ce:	9d e4       	ldi	r25, 0x4D	; 77
 1d0:	54 96       	adiw	r26, 0x14	; 20
 1d2:	9c 93       	st	X, r25

	// Setup port pins for TxD, XCK and LUT0OUT
	PORTC.PIN0CTRL = PORT_OPC_TOTEM_gc;                         // LUT0OUT (data to WS2812)
 1d4:	a0 e4       	ldi	r26, 0x40	; 64
 1d6:	b6 e0       	ldi	r27, 0x06	; 6
 1d8:	50 96       	adiw	r26, 0x10	; 16
 1da:	1c 92       	st	X, r1
 1dc:	50 97       	sbiw	r26, 0x10	; 16
	PORTC.PIN1CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_RISING_gc;    // XCK
 1de:	51 96       	adiw	r26, 0x11	; 17
 1e0:	8c 93       	st	X, r24
 1e2:	51 97       	sbiw	r26, 0x11	; 17
	PORTC.PIN3CTRL = PORT_OPC_TOTEM_gc | PORT_ISC_LEVEL_gc;     // TxD
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	53 96       	adiw	r26, 0x13	; 19
 1e8:	8c 93       	st	X, r24
 1ea:	53 97       	sbiw	r26, 0x13	; 19
	PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN3_bm;
 1ec:	9b e0       	ldi	r25, 0x0B	; 11
 1ee:	11 96       	adiw	r26, 0x01	; 1
 1f0:	9c 93       	st	X, r25

	// Setup Event channel 0 to TxD (async)
	EVSYS.CH0MUX = EVSYS_CHMUX_PORTC_PIN3_gc;
 1f2:	a0 e8       	ldi	r26, 0x80	; 128
 1f4:	b1 e0       	ldi	r27, 0x01	; 1
 1f6:	93 e6       	ldi	r25, 0x63	; 99
 1f8:	9c 93       	st	X, r25
	EVSYS.CH0CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 1fa:	18 96       	adiw	r26, 0x08	; 8
 1fc:	1c 92       	st	X, r1
 1fe:	18 97       	sbiw	r26, 0x08	; 8
	// Setup Event channel 6 to XCK rising edge
	EVSYS.CH6MUX = EVSYS_CHMUX_PORTC_PIN1_gc;
 200:	91 e6       	ldi	r25, 0x61	; 97
 202:	16 96       	adiw	r26, 0x06	; 6
 204:	9c 93       	st	X, r25
 206:	16 97       	sbiw	r26, 0x06	; 6
	EVSYS.CH6CTRL = EVSYS_DIGFILT_1SAMPLE_gc;
 208:	1e 96       	adiw	r26, 0x0e	; 14
 20a:	1c 92       	st	X, r1

	// Setup USART in master SPI mode 1, MSB first
	USARTC0.BAUDCTRLA = 19;                                     // 800.000 baud (1250 ns @ 32 MHz)
 20c:	93 e1       	ldi	r25, 0x13	; 19
 20e:	96 83       	std	Z+6, r25	; 0x06
	USARTC0.BAUDCTRLB = 0;
 210:	17 82       	std	Z+7, r1	; 0x07
	USARTC0.CTRLA = USART_RXCINTLVL_OFF_gc | USART_TXCINTLVL_OFF_gc; 
 212:	12 82       	std	Z+2, r1	; 0x02
	USARTC0.CTRLC = USART_CMODE_MSPI_gc | (1 << 1);             // UDORD=0 UCPHA=1
 214:	92 ec       	ldi	r25, 0xC2	; 194
 216:	94 83       	std	Z+4, r25	; 0x04
	USARTC0.CTRLD = USART_DECTYPE_DATA_gc | USART_LUTACT_OFF_gc | USART_PECACT_OFF_gc;
 218:	15 82       	std	Z+5, r1	; 0x05
	USARTC0.CTRLB = USART_TXEN_bm;
 21a:	98 e0       	ldi	r25, 0x08	; 8
 21c:	93 83       	std	Z+3, r25	; 0x03

	// Setup XCL BTC0 timer to 1shot pwm generation
	XCL.CTRLE = XCL_CMDSEL_NONE_gc | XCL_TCSEL_BTC0_gc | XCL_CLKSEL_DIV1_gc;
 21e:	e0 e6       	ldi	r30, 0x60	; 96
 220:	f4 e0       	ldi	r31, 0x04	; 4
 222:	91 e1       	ldi	r25, 0x11	; 17
 224:	94 83       	std	Z+4, r25	; 0x04
	XCL.CTRLF = XCL_CMDEN_DISABLE_gc | 0x03;                    // 0x03 : One-shot PWM (missing in iox32e5.h)
 226:	85 83       	std	Z+5, r24	; 0x05
	XCL.CTRLG = XCL_EVACTEN_bm | (0x03<<3) | XCL_EVSRC_EVCH6_gc; // 0x03<<3 : EVACT0=RESTART (missing in iox32e5.h)
 228:	8e e9       	ldi	r24, 0x9E	; 158
 22a:	86 83       	std	Z+6, r24	; 0x06
	XCL.PERCAPTL = 22;                                          // Output high time if data is 1 (from RESTART to falling edge of one-shot)
 22c:	86 e1       	ldi	r24, 0x16	; 22
 22e:	86 87       	std	Z+14, r24	; 0x0e
	XCL.CMPL = 13;                                              // Output high time if data is 0 (from RESTART to rising edge of one-shot)
 230:	8d e0       	ldi	r24, 0x0D	; 13
 232:	84 87       	std	Z+12, r24	; 0x0c

	// Setup XCL LUT
	XCL.CTRLA = XCL_LUT0OUTEN_PIN0_gc | XCL_PORTSEL_PC_gc | XCL_LUTCONF_MUX_gc;  // Setup glue logic for MUX
 234:	84 e4       	ldi	r24, 0x44	; 68
 236:	80 83       	st	Z, r24
	XCL.CTRLB = 0x50;                                           // IN3SEL=XCL, IN2SEL=XCL, IN1SEL=EVSYS, IN0SEL=EVSYS (missing in iox32e5.h)
 238:	80 e5       	ldi	r24, 0x50	; 80
 23a:	81 83       	std	Z+1, r24	; 0x01
	XCL.CTRLC = XCL_EVASYSEL0_bm | XCL_DLY0CONF_DISABLE_gc;      // Async inputs, no delay
 23c:	80 e4       	ldi	r24, 0x40	; 64
 23e:	82 83       	std	Z+2, r24	; 0x02
	XCL.CTRLD = 0xA0;                                           // LUT truthtables (only LUT1 is used)
 240:	80 ea       	ldi	r24, 0xA0	; 160
 242:	83 83       	std	Z+3, r24	; 0x03
 244:	08 95       	ret

00000246 <ws2812drv_start_transfer>:

}

void ws2812drv_start_transfer()
{
	EDMA.CH0.ADDR = (uint16_t)bytes;
 246:	e0 e0       	ldi	r30, 0x00	; 0
 248:	f1 e0       	ldi	r31, 0x01	; 1
 24a:	89 e2       	ldi	r24, 0x29	; 41
 24c:	90 e2       	ldi	r25, 0x20	; 32
 24e:	80 8f       	std	Z+24, r24	; 0x18
 250:	91 8f       	std	Z+25, r25	; 0x19
	EDMA.CH0.TRFCNT = byte_count;
 252:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <byte_count>
 256:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <byte_count+0x1>
 25a:	86 8b       	std	Z+22, r24	; 0x16
 25c:	97 8b       	std	Z+23, r25	; 0x17
	EDMA.CH0.CTRLA = EDMA_CH_ENABLE_bm | EDMA_CH_SINGLE_bm; // Start DMA transfer to LEDs
 25e:	84 e8       	ldi	r24, 0x84	; 132
 260:	80 8b       	std	Z+16, r24	; 0x10
 262:	08 95       	ret

00000264 <transmit_ws2812>:
}

void transmit_ws2812()
{
	//DEBUG START
	while(!(USARTD0_STATUS & USART_DREIF_bm)){};
 264:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fb9c1>
 268:	85 ff       	sbrs	r24, 5
 26a:	fc cf       	rjmp	.-8      	; 0x264 <transmit_ws2812>
	USARTD0_DATA = 0x55;
 26c:	85 e5       	ldi	r24, 0x55	; 85
 26e:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7fb9c0>
			
	while(!(USARTD0_STATUS & USART_DREIF_bm)){};
 272:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fb9c1>
 276:	85 ff       	sbrs	r24, 5
 278:	fc cf       	rjmp	.-8      	; 0x272 <transmit_ws2812+0xe>
	USARTD0_DATA = hi_byte;
 27a:	80 91 23 20 	lds	r24, 0x2023	; 0x802023 <hi_byte>
 27e:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7fb9c0>
	while(!(USARTD0_STATUS & USART_DREIF_bm)){};
 282:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fb9c1>
 286:	85 ff       	sbrs	r24, 5
 288:	fc cf       	rjmp	.-8      	; 0x282 <transmit_ws2812+0x1e>
	USARTD0_DATA = lo_byte & 0xFF;
 28a:	80 91 22 20 	lds	r24, 0x2022	; 0x802022 <lo_byte>
 28e:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7fb9c0>

			while(!(USARTD0_STATUS & USART_DREIF_bm)){};
 292:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fb9c1>
 296:	85 ff       	sbrs	r24, 5
 298:	fc cf       	rjmp	.-8      	; 0x292 <transmit_ws2812+0x2e>
			USARTD0_DATA = 0x55;
 29a:	85 e5       	ldi	r24, 0x55	; 85
 29c:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7fb9c0>
			while(!(USARTD0_STATUS & USART_DREIF_bm)){};
 2a0:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fb9c1>
 2a4:	85 ff       	sbrs	r24, 5
 2a6:	fc cf       	rjmp	.-8      	; 0x2a0 <transmit_ws2812+0x3c>
			USARTD0_DATA = setting;
 2a8:	80 91 21 20 	lds	r24, 0x2021	; 0x802021 <setting>
 2ac:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7fb9c0>
			while(!(USARTD0_STATUS & USART_DREIF_bm)){};
 2b0:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fb9c1>
 2b4:	85 ff       	sbrs	r24, 5
 2b6:	fc cf       	rjmp	.-8      	; 0x2b0 <transmit_ws2812+0x4c>
			USARTD0_DATA = 0x55;	
 2b8:	85 e5       	ldi	r24, 0x55	; 85
 2ba:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7fb9c0>
	//DEBUG END
	ws2812drv_start_transfer();
 2be:	0e 94 23 01 	call	0x246	; 0x246 <ws2812drv_start_transfer>
	rcvState = HiByte;
 2c2:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <__data_end>
 2c6:	08 95       	ret

000002c8 <swap_r_g>:

//swaps the data for r and g to match the g-r-b ws2812b data pattern
void swap_r_g()
{
	uint8_t temp;
	for(uint16_t i = 0; i < byte_count; i+=3)
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <swap_r_g+0x1c>
	{
		temp = bytes[i];
 2ce:	dc 01       	movw	r26, r24
 2d0:	a7 5d       	subi	r26, 0xD7	; 215
 2d2:	bf 4d       	sbci	r27, 0xDF	; 223
 2d4:	2c 91       	ld	r18, X
		bytes[i] = bytes[i+1];
 2d6:	fc 01       	movw	r30, r24
 2d8:	e6 5d       	subi	r30, 0xD6	; 214
 2da:	ff 4d       	sbci	r31, 0xDF	; 223
 2dc:	30 81       	ld	r19, Z
 2de:	3c 93       	st	X, r19
		bytes[i+1] = temp;
 2e0:	20 83       	st	Z, r18

//swaps the data for r and g to match the g-r-b ws2812b data pattern
void swap_r_g()
{
	uint8_t temp;
	for(uint16_t i = 0; i < byte_count; i+=3)
 2e2:	03 96       	adiw	r24, 0x03	; 3
 2e4:	20 91 26 20 	lds	r18, 0x2026	; 0x802026 <byte_count>
 2e8:	30 91 27 20 	lds	r19, 0x2027	; 0x802027 <byte_count+0x1>
 2ec:	82 17       	cp	r24, r18
 2ee:	93 07       	cpc	r25, r19
 2f0:	70 f3       	brcs	.-36     	; 0x2ce <swap_r_g+0x6>
	{
		temp = bytes[i];
		bytes[i] = bytes[i+1];
		bytes[i+1] = temp;
	}
}
 2f2:	08 95       	ret

000002f4 <main>:

int main(void)
{
	cli();
 2f4:	f8 94       	cli
	
	
	
	PORTD.DIRSET = PIN3_bm;
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7fb661>
	PORTA.OUTCLR = PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
 2fc:	e0 e0       	ldi	r30, 0x00	; 0
 2fe:	f6 e0       	ldi	r31, 0x06	; 6
 300:	8e e1       	ldi	r24, 0x1E	; 30
 302:	86 83       	std	Z+6, r24	; 0x06
	PORTA_PIN1CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FORCE_ENABLE_gc;
 304:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <__TEXT_REGION_LENGTH__+0x7fb611>
	PORTA_PIN2CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FORCE_ENABLE_gc;
 308:	80 93 12 06 	sts	0x0612, r24	; 0x800612 <__TEXT_REGION_LENGTH__+0x7fb612>
	PORTA_PIN3CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FORCE_ENABLE_gc;
 30c:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <__TEXT_REGION_LENGTH__+0x7fb613>
	PORTA_PIN4CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FORCE_ENABLE_gc;
 310:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <__TEXT_REGION_LENGTH__+0x7fb614>
		
	//DEBUG START
	PORTA.DIRSET = PIN0_bm;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = PIN0_bm;
 318:	85 83       	std	Z+5, r24	; 0x05
	//DEBUG END
	
	init_clk();
 31a:	0e 94 8e 00 	call	0x11c	; 0x11c <init_clk>
	init_interrupts();
 31e:	0e 94 9d 00 	call	0x13a	; 0x13a <init_interrupts>

	read_baud_switches();
 322:	0e 94 75 00 	call	0xea	; 0xea <read_baud_switches>
	init_usart();
 326:	0e 94 a1 00 	call	0x142	; 0x142 <init_usart>
	ws2812drv_init();
 32a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <ws2812drv_init>
	init_timer();
 32e:	0e 94 c5 00 	call	0x18a	; 0x18a <init_timer>
	sei();
 332:	78 94       	sei
	set_baud();
 334:	0e 94 b8 00 	call	0x170	; 0x170 <set_baud>
    /* Replace with your application code */
    while (1) 
    {
		if (rcvState == Trans)
 338:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
 33c:	83 30       	cpi	r24, 0x03	; 3
 33e:	e1 f7       	brne	.-8      	; 0x338 <main+0x44>
		{
			swap_r_g();
 340:	0e 94 64 01 	call	0x2c8	; 0x2c8 <swap_r_g>
			
			transmit_ws2812();
 344:	0e 94 32 01 	call	0x264	; 0x264 <transmit_ws2812>
			set_baud();
 348:	0e 94 b8 00 	call	0x170	; 0x170 <set_baud>
 34c:	f5 cf       	rjmp	.-22     	; 0x338 <main+0x44>

0000034e <__vector_40>:




ISR(USARTD0_RXC_vect)
{
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	ef 93       	push	r30
 362:	ff 93       	push	r31
	uint8_t data = USARTD0.DATA;
 364:	90 91 c0 09 	lds	r25, 0x09C0	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7fb9c0>
	
	switch (rcvState)
 368:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	c1 f0       	breq	.+48     	; 0x3a0 <__vector_40+0x52>
 370:	30 f0       	brcs	.+12     	; 0x37e <__vector_40+0x30>
 372:	82 30       	cpi	r24, 0x02	; 2
 374:	d9 f1       	breq	.+118    	; 0x3ec <__vector_40+0x9e>
 376:	84 30       	cpi	r24, 0x04	; 4
 378:	09 f4       	brne	.+2      	; 0x37c <__vector_40+0x2e>
 37a:	60 c0       	rjmp	.+192    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 37c:	62 c0       	rjmp	.+196    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
	{
		case HiByte:
		
			hi_byte = data;
 37e:	90 93 23 20 	sts	0x2023, r25	; 0x802023 <hi_byte>
			byte_count = (uint16_t)(hi_byte << 8);
 382:	20 91 23 20 	lds	r18, 0x2023	; 0x802023 <hi_byte>
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	92 2f       	mov	r25, r18
 38a:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <byte_count>
 38e:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <byte_count+0x1>
			rcvState = LoByte;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end>
			//Start the "timeout" timer because we are done receiving
			TCC4.CTRLGCLR = TC4_STOP_bm;
 398:	80 e2       	ldi	r24, 0x20	; 32
 39a:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x7fb808>
			
			break;
 39e:	51 c0       	rjmp	.+162    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		case LoByte:
			lo_byte = data;
 3a0:	90 93 22 20 	sts	0x2022, r25	; 0x802022 <lo_byte>
			byte_count += lo_byte;
 3a4:	20 91 22 20 	lds	r18, 0x2022	; 0x802022 <lo_byte>
 3a8:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <byte_count>
 3ac:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <byte_count+0x1>
 3b0:	82 0f       	add	r24, r18
 3b2:	91 1d       	adc	r25, r1
 3b4:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <byte_count>
 3b8:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <byte_count+0x1>
			byte_count *= 3;
 3bc:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <byte_count>
 3c0:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <byte_count+0x1>
 3c4:	9c 01       	movw	r18, r24
 3c6:	22 0f       	add	r18, r18
 3c8:	33 1f       	adc	r19, r19
 3ca:	82 0f       	add	r24, r18
 3cc:	93 1f       	adc	r25, r19
 3ce:	80 93 26 20 	sts	0x2026, r24	; 0x802026 <byte_count>
 3d2:	90 93 27 20 	sts	0x2027, r25	; 0x802027 <byte_count+0x1>
			rcv_index = 0;
 3d6:	10 92 24 20 	sts	0x2024, r1	; 0x802024 <rcv_index>
 3da:	10 92 25 20 	sts	0x2025, r1	; 0x802025 <rcv_index+0x1>
			rcvState = Data;
 3de:	82 e0       	ldi	r24, 0x02	; 2
 3e0:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end>
			//reset "timeout" timer so it doesn't time out while receiving 
			TCC4.CTRLGSET = TC4_CMD1_bm;
 3e4:	88 e0       	ldi	r24, 0x08	; 8
 3e6:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x7fb809>
			
		
			break;
 3ea:	2b c0       	rjmp	.+86     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
		case Data:
			

		
				PORTA.OUTTGL = PIN0_bm;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x7fb607>
			bytes[rcv_index] = data;
 3f2:	e0 91 24 20 	lds	r30, 0x2024	; 0x802024 <rcv_index>
 3f6:	f0 91 25 20 	lds	r31, 0x2025	; 0x802025 <rcv_index+0x1>
 3fa:	e7 5d       	subi	r30, 0xD7	; 215
 3fc:	ff 4d       	sbci	r31, 0xDF	; 223
 3fe:	90 83       	st	Z, r25
			rcv_index++;
 400:	80 91 24 20 	lds	r24, 0x2024	; 0x802024 <rcv_index>
 404:	90 91 25 20 	lds	r25, 0x2025	; 0x802025 <rcv_index+0x1>
 408:	01 96       	adiw	r24, 0x01	; 1
 40a:	80 93 24 20 	sts	0x2024, r24	; 0x802024 <rcv_index>
 40e:	90 93 25 20 	sts	0x2025, r25	; 0x802025 <rcv_index+0x1>
			//reset "timeout" timer so it doesn't time out while receiving 
			TCC4.CTRLGSET = TC4_CMD1_bm;
 412:	88 e0       	ldi	r24, 0x08	; 8
 414:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x7fb809>
			if (rcv_index == byte_count)
 418:	20 91 24 20 	lds	r18, 0x2024	; 0x802024 <rcv_index>
 41c:	30 91 25 20 	lds	r19, 0x2025	; 0x802025 <rcv_index+0x1>
 420:	80 91 26 20 	lds	r24, 0x2026	; 0x802026 <byte_count>
 424:	90 91 27 20 	lds	r25, 0x2027	; 0x802027 <byte_count+0x1>
 428:	28 17       	cp	r18, r24
 42a:	39 07       	cpc	r19, r25
 42c:	51 f4       	brne	.+20     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			{
				rcvState = Trans;
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end>
				//Stop the "timeout" timer because we are done receiving
				TCC4.CTRLGSET = TC4_STOP_bm;
 434:	80 e2       	ldi	r24, 0x20	; 32
 436:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x7fb809>
 43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
				be long enough. If this is the case, we will wait till no more
				data is received for a short period before going back to the
				startup state.
			*/
			//reset "timeout" timer to wait till we stop receiving
			TCC4.CTRLGSET = TC4_CMD1_bm;		
 43c:	88 e0       	ldi	r24, 0x08	; 8
 43e:	80 93 09 08 	sts	0x0809, r24	; 0x800809 <__TEXT_REGION_LENGTH__+0x7fb809>
			break;
		
	}
	

	USARTD0_STATUS = USART_RXCIF_bm;
 442:	80 e8       	ldi	r24, 0x80	; 128
 444:	80 93 c1 09 	sts	0x09C1, r24	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fb9c1>
}
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	3f 91       	pop	r19
 452:	2f 91       	pop	r18
 454:	0f 90       	pop	r0
 456:	0f be       	out	0x3f, r0	; 63
 458:	0f 90       	pop	r0
 45a:	1f 90       	pop	r1
 45c:	18 95       	reti

0000045e <__vector_12>:

ISR(TCC4_OVF_vect)
{
 45e:	1f 92       	push	r1
 460:	0f 92       	push	r0
 462:	0f b6       	in	r0, 0x3f	; 63
 464:	0f 92       	push	r0
 466:	11 24       	eor	r1, r1
 468:	8f 93       	push	r24
	if (rcvState == LoByte || rcvState == Data)
 46a:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	21 f0       	breq	.+8      	; 0x47a <__vector_12+0x1c>
 472:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
 476:	82 30       	cpi	r24, 0x02	; 2
 478:	21 f4       	brne	.+8      	; 0x482 <__vector_12+0x24>
	{
		//We reached here while receiving so assume receive glitch
		rcvState = Timeout;		
 47a:	84 e0       	ldi	r24, 0x04	; 4
 47c:	80 93 20 20 	sts	0x2020, r24	; 0x802020 <__data_end>
 480:	06 c0       	rjmp	.+12     	; 0x48e <__vector_12+0x30>
	}
	else if (rcvState == Timeout)
 482:	80 91 20 20 	lds	r24, 0x2020	; 0x802020 <__data_end>
 486:	84 30       	cpi	r24, 0x04	; 4
 488:	11 f4       	brne	.+4      	; 0x48e <__vector_12+0x30>
	{
		//We reached here during timeout so we can go back to normal
		rcvState = HiByte;
 48a:	10 92 20 20 	sts	0x2020, r1	; 0x802020 <__data_end>
	}
	
	TCC4.INTFLAGS = TC4_OVFIF_bm;
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	80 93 0c 08 	sts	0x080C, r24	; 0x80080c <__TEXT_REGION_LENGTH__+0x7fb80c>
 494:	8f 91       	pop	r24
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <_exit>:
 4a0:	f8 94       	cli

000004a2 <__stop_program>:
 4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <__stop_program>


t412-LED-test-driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803f00  00803f00  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00803f00  00803f00  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cde  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001566  00000000  00000000  00002042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000058a  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00003b34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ee9  00000000  00000000  00003c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002fd  00000000  00000000  00004b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004e5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1f e3       	ldi	r17, 0x3F	; 63
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	bf e3       	ldi	r27, 0x3F	; 63
  46:	ea ef       	ldi	r30, 0xFA	; 250
  48:	f1 e0       	ldi	r31, 0x01	; 1
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	bf e3       	ldi	r27, 0x3F	; 63
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a1 30       	cpi	r26, 0x01	; 1
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	a4 d0       	rcall	.+328    	; 0x1b0 <main>
  68:	c6 c0       	rjmp	.+396    	; 0x1f6 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <init_clk>:
void (*test_table[4])(void) = { transmit_test_1, transmit_test_2, transmit_test_3, transmit_test_4};

void generate_test_data()
{
	(*test_table[test_mode & 0x03])();
	test_mode++;
  6c:	88 ed       	ldi	r24, 0xD8	; 216
  6e:	84 bf       	out	0x34, r24	; 52
  70:	e0 e6       	ldi	r30, 0x60	; 96
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	10 82       	st	Z, r1
  76:	84 bf       	out	0x34, r24	; 52
  78:	11 82       	std	Z+1, r1	; 0x01
  7a:	08 95       	ret

0000007c <init_usart>:
  7c:	80 e4       	ldi	r24, 0x40	; 64
  7e:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__RODATA_PM_OFFSET__+0x7f8401>
  82:	10 92 05 08 	sts	0x0805, r1	; 0x800805 <__RODATA_PM_OFFSET__+0x7f8805>
  86:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__RODATA_PM_OFFSET__+0x7f8806>
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	80 93 07 08 	sts	0x0807, r24	; 0x800807 <__RODATA_PM_OFFSET__+0x7f8807>
  90:	86 eb       	ldi	r24, 0xB6	; 182
  92:	92 e0       	ldi	r25, 0x02	; 2
  94:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__RODATA_PM_OFFSET__+0x7f8808>
  98:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__RODATA_PM_OFFSET__+0x7f8809>
  9c:	08 95       	ret

0000009e <transmit_single_led>:
  9e:	90 91 04 08 	lds	r25, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  a2:	95 ff       	sbrs	r25, 5
  a4:	fc cf       	rjmp	.-8      	; 0x9e <transmit_single_led>
  a6:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
  aa:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  ae:	85 ff       	sbrs	r24, 5
  b0:	fc cf       	rjmp	.-8      	; 0xaa <transmit_single_led+0xc>
  b2:	60 93 02 08 	sts	0x0802, r22	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
  b6:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  ba:	85 ff       	sbrs	r24, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <transmit_single_led+0x18>
  be:	40 93 02 08 	sts	0x0802, r20	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
  c2:	08 95       	ret

000000c4 <transmit_led_count>:
  c4:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  c8:	85 ff       	sbrs	r24, 5
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <transmit_led_count>
  cc:	10 92 02 08 	sts	0x0802, r1	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
  d0:	80 91 04 08 	lds	r24, 0x0804	; 0x800804 <__RODATA_PM_OFFSET__+0x7f8804>
  d4:	85 ff       	sbrs	r24, 5
  d6:	fc cf       	rjmp	.-8      	; 0xd0 <transmit_led_count+0xc>
  d8:	86 e4       	ldi	r24, 0x46	; 70
  da:	80 93 02 08 	sts	0x0802, r24	; 0x800802 <__RODATA_PM_OFFSET__+0x7f8802>
  de:	08 95       	ret

000000e0 <transmit_single_color>:
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	f8 2e       	mov	r15, r24
  ec:	06 2f       	mov	r16, r22
  ee:	14 2f       	mov	r17, r20
  f0:	e9 df       	rcall	.-46     	; 0xc4 <transmit_led_count>
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	d0 e0       	ldi	r29, 0x00	; 0
  f6:	05 c0       	rjmp	.+10     	; 0x102 <__DATA_REGION_LENGTH__+0x2>
  f8:	41 2f       	mov	r20, r17
  fa:	60 2f       	mov	r22, r16
  fc:	8f 2d       	mov	r24, r15
  fe:	cf df       	rcall	.-98     	; 0x9e <transmit_single_led>
 100:	21 96       	adiw	r28, 0x01	; 1
 102:	c6 34       	cpi	r28, 0x46	; 70
 104:	d1 05       	cpc	r29, r1
 106:	c0 f3       	brcs	.-16     	; 0xf8 <transmit_single_color+0x18>
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	08 95       	ret

00000114 <transmit_one_light>:
}


void transmit_one_light(uint8_t red, uint8_t green, uint8_t blue)
{
 114:	ff 92       	push	r15
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	f8 2e       	mov	r15, r24
 120:	06 2f       	mov	r16, r22
 122:	14 2f       	mov	r17, r20
	for (uint16_t i = 0; i < LEDS_PER_LIGHT; i++)
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <transmit_one_light+0x20>
	{
		transmit_single_led(red, green, blue);
 12a:	41 2f       	mov	r20, r17
 12c:	60 2f       	mov	r22, r16
 12e:	8f 2d       	mov	r24, r15
 130:	b6 df       	rcall	.-148    	; 0x9e <transmit_single_led>
}


void transmit_one_light(uint8_t red, uint8_t green, uint8_t blue)
{
	for (uint16_t i = 0; i < LEDS_PER_LIGHT; i++)
 132:	21 96       	adiw	r28, 0x01	; 1
 134:	c7 30       	cpi	r28, 0x07	; 7
 136:	d1 05       	cpc	r29, r1
 138:	c0 f3       	brcs	.-16     	; 0x12a <transmit_one_light+0x16>
	{
		transmit_single_led(red, green, blue);
	} 
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	ff 90       	pop	r15
 144:	08 95       	ret

00000146 <generate_4thOfJuly_pattern>:

volatile uint8_t offset = 0;

void generate_4thOfJuly_pattern()
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
	uint8_t step = offset;
 14a:	c0 91 00 3f 	lds	r28, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
	transmit_led_count();
 14e:	ba df       	rcall	.-140    	; 0xc4 <transmit_led_count>
	
	for (uint8_t i = 0; i < LIGHTS; i++)
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	19 c0       	rjmp	.+50     	; 0x186 <generate_4thOfJuly_pattern+0x40>
	{
		switch(step)
 154:	c1 30       	cpi	r28, 0x01	; 1
 156:	49 f0       	breq	.+18     	; 0x16a <generate_4thOfJuly_pattern+0x24>
 158:	18 f0       	brcs	.+6      	; 0x160 <generate_4thOfJuly_pattern+0x1a>
 15a:	c2 30       	cpi	r28, 0x02	; 2
 15c:	59 f0       	breq	.+22     	; 0x174 <generate_4thOfJuly_pattern+0x2e>
 15e:	0e c0       	rjmp	.+28     	; 0x17c <generate_4thOfJuly_pattern+0x36>
		{
			case 0:
				transmit_one_light(128,0,0); //RED
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	d6 df       	rcall	.-84     	; 0x114 <transmit_one_light>
				break;
 168:	09 c0       	rjmp	.+18     	; 0x17c <generate_4thOfJuly_pattern+0x36>
			case 1:
				transmit_one_light(48,48,48); //WHITE
 16a:	40 e3       	ldi	r20, 0x30	; 48
 16c:	60 e3       	ldi	r22, 0x30	; 48
 16e:	80 e3       	ldi	r24, 0x30	; 48
 170:	d1 df       	rcall	.-94     	; 0x114 <transmit_one_light>
				break;
 172:	04 c0       	rjmp	.+8      	; 0x17c <generate_4thOfJuly_pattern+0x36>
			case 2:
				transmit_one_light(0,0,128); //BLUE
 174:	40 e8       	ldi	r20, 0x80	; 128
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	cc df       	rcall	.-104    	; 0x114 <transmit_one_light>
				break;
		}
		
		step++;
 17c:	cf 5f       	subi	r28, 0xFF	; 255
		
		if (step > 2)
 17e:	c3 30       	cpi	r28, 0x03	; 3
 180:	08 f0       	brcs	.+2      	; 0x184 <generate_4thOfJuly_pattern+0x3e>
		{
			step = 0;
 182:	c0 e0       	ldi	r28, 0x00	; 0
void generate_4thOfJuly_pattern()
{
	uint8_t step = offset;
	transmit_led_count();
	
	for (uint8_t i = 0; i < LIGHTS; i++)
 184:	df 5f       	subi	r29, 0xFF	; 255
 186:	da 30       	cpi	r29, 0x0A	; 10
 188:	28 f3       	brcs	.-54     	; 0x154 <generate_4thOfJuly_pattern+0xe>
		{
			step = 0;
		}
	}
	
	offset++;
 18a:	80 91 00 3f 	lds	r24, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
 18e:	8f 5f       	subi	r24, 0xFF	; 255
 190:	80 93 00 3f 	sts	0x3F00, r24	; 0x803f00 <__DATA_REGION_ORIGIN__>
	
	if (offset > 2)
 194:	80 91 00 3f 	lds	r24, 0x3F00	; 0x803f00 <__DATA_REGION_ORIGIN__>
 198:	83 30       	cpi	r24, 0x03	; 3
 19a:	10 f0       	brcs	.+4      	; 0x1a0 <generate_4thOfJuly_pattern+0x5a>
	{
		offset = 0;
 19c:	10 92 00 3f 	sts	0x3F00, r1	; 0x803f00 <__DATA_REGION_ORIGIN__>
	}
	
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <transmit_warm_white>:

void transmit_warm_white()
{
	transmit_single_color(255, 142, 33); //2100K
 1a6:	41 e2       	ldi	r20, 0x21	; 33
 1a8:	6e e8       	ldi	r22, 0x8E	; 142
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	99 df       	rcall	.-206    	; 0xe0 <transmit_single_color>
 1ae:	08 95       	ret

000001b0 <main>:
}

int main(void)
{
	uint8_t test = 1;
	PORTA.DIRSET = PIN1_bm;
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d4 e0       	ldi	r29, 0x04	; 4
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	89 83       	std	Y+1, r24	; 0x01
	PORTA.OUTCLR = PIN1_bm;
 1b8:	8e 83       	std	Y+6, r24	; 0x06
	init_clk();
 1ba:	58 df       	rcall	.-336    	; 0x6c <init_clk>
	init_usart();
 1bc:	5f df       	rcall	.-322    	; 0x7c <init_usart>
	
	PORTA.DIRCLR = PIN7_bm;
 1be:	80 e8       	ldi	r24, 0x80	; 128
 1c0:	8a 83       	std	Y+2, r24	; 0x02
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
 1c2:	88 e0       	ldi	r24, 0x08	; 8
 1c4:	8f 8b       	std	Y+23, r24	; 0x17
	
	if ((PORTA.IN & PIN7_bm))
 1c6:	88 85       	ldd	r24, Y+8	; 0x08
 1c8:	88 23       	and	r24, r24
 1ca:	14 f0       	brlt	.+4      	; 0x1d0 <main+0x20>
	transmit_single_color(255, 142, 33); //2100K
}

int main(void)
{
	uint8_t test = 1;
 1cc:	c1 e0       	ldi	r28, 0x01	; 1
 1ce:	01 c0       	rjmp	.+2      	; 0x1d2 <main+0x22>
	PORTA.DIRCLR = PIN7_bm;
	PORTA.PIN7CTRL = PORT_PULLUPEN_bm;
	
	if ((PORTA.IN & PIN7_bm))
	{
		test = 0;
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
    /* Replace with your application code */
    while (1) 
    {
		PORTA.OUTTGL = PIN1_bm;
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <__RODATA_PM_OFFSET__+0x7f8407>
		if (test)
 1d8:	cc 23       	and	r28, r28
 1da:	11 f0       	breq	.+4      	; 0x1e0 <main+0x30>
		{
			generate_4thOfJuly_pattern();
 1dc:	b4 df       	rcall	.-152    	; 0x146 <generate_4thOfJuly_pattern>
 1de:	01 c0       	rjmp	.+2      	; 0x1e2 <main+0x32>
		}
		else
		{
			//generate_test_data();	
			transmit_warm_white();
 1e0:	e2 df       	rcall	.-60     	; 0x1a6 <transmit_warm_white>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	88 e0       	ldi	r24, 0x08	; 8
 1e6:	9d e3       	ldi	r25, 0x3D	; 61
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x38>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x42>
 1f2:	00 00       	nop
 1f4:	ee cf       	rjmp	.-36     	; 0x1d2 <main+0x22>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
